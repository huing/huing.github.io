<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>互联网 on huing的博客</title>
    <link>https://huing.github.io/tags/%E4%BA%92%E8%81%94%E7%BD%91/</link>
    <description>Recent content in 互联网 on huing的博客</description>
    <generator>Hugo -- 0.133.1</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 03 Apr 2025 14:02:41 +0800</lastBuildDate>
    <atom:link href="https://huing.github.io/tags/%E4%BA%92%E8%81%94%E7%BD%91/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>重排重绘</title>
      <link>https://huing.github.io/posts/%E4%BA%92%E8%81%94%E7%BD%91/%E9%87%8D%E6%8E%92%E9%87%8D%E7%BB%98/</link>
      <pubDate>Thu, 03 Apr 2025 14:02:41 +0800</pubDate>
      <guid>https://huing.github.io/posts/%E4%BA%92%E8%81%94%E7%BD%91/%E9%87%8D%E6%8E%92%E9%87%8D%E7%BB%98/</guid>
      <description>浏览器渲染过程 浏览器渲染页面的基本流程如下:
解析 HTML 构建 DOM 树(DOM Tree) 解析 CSS 构建 CSSOM 树(CSS Object Model) 将 DOM 树和 CSSOM 树合并成渲染树(Render Tree) 布局(Layout):计算每个节点在屏幕中的确切位置和大小 绘制(Paint):将渲染树的每个节点转换成屏幕上的实际像素 重排(Reflow) 什么是重排 重排是指当 DOM 的变化影响了元素的几何信息(位置和尺寸)时，浏览器需要重新计算元素的几何属性，并重新排列它们的位置。这个过程也被称为回流。
触发重排的操作 DOM 元素的增加、删除或位置改变 DOM 元素的尺寸改变（包括外边距、内边距、边框厚度、宽度、高度等） 页面渲染初始化 浏览器窗口尺寸改变 元素字体大小变化 激活 CSS 伪类（例如：:hover） 查询某些属性或调用某些方法： clientWidth、clientHeight、clientTop、clientLeft offsetWidth、offsetHeight、offsetTop、offsetLeft scrollWidth、scrollHeight、scrollTop、scrollLeft getComputedStyle() getBoundingClientRect() 重绘(Repaint) 什么是重绘 重绘是指当元素的外观发生改变，但没有改变布局时，浏览器会重新绘制元素。重绘的代价较重排小。
触发重绘的操作 修改背景色、文字颜色、边框颜色等 visibility outline box-shadow border-radius 性能优化建议 批量修改 DOM // 不推荐 const el = document.getElementById(&amp;#34;test&amp;#34;); el.style.padding = &amp;#34;5px&amp;#34;; el.style.borderLeft = &amp;#34;1px&amp;#34;; el.style.borderRight = &amp;#34;2px&amp;#34;; // 推荐 const el = document.</description>
    </item>
    <item>
      <title>浏览器的渲染过程</title>
      <link>https://huing.github.io/posts/%E4%BA%92%E8%81%94%E7%BD%91/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E6%B8%B2%E6%9F%93%E8%BF%87%E7%A8%8B/</link>
      <pubDate>Thu, 03 Apr 2025 10:11:08 +0800</pubDate>
      <guid>https://huing.github.io/posts/%E4%BA%92%E8%81%94%E7%BD%91/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E6%B8%B2%E6%9F%93%E8%BF%87%E7%A8%8B/</guid>
      <description>浏览器的渲染过程 浏览器渲染网页是一个复杂的过程，主要包含以下几个关键步骤：
1. 浏览器的主要组件 浏览器由以下核心组件构成：
用户界面 - 包括地址栏、前进/后退按钮、书签菜单等 浏览器引擎 - 在用户界面和渲染引擎之间传送指令 渲染引擎 - 负责显示请求的内容 网络组件 - 处理网络请求 UI 后端 - 用于绘制基本的窗口小部件 JavaScript 解释器 - 用于解析和执行 JavaScript 代码 数据存储 - 包括 Cookie、LocalStorage 等机制 2. 渲染过程的主要步骤 2.1 解析 HTML 浏览器开始解析 HTML 文档 构建 DOM（文档对象模型）树 DOM 树反映了 HTML 文档的层级结构 2.2 获取外部资源 解析过程中遇到外部资源（CSS、JavaScript、图片等）时会发起请求 CSS 文件是渲染阻塞资源 JavaScript 可能是解析阻塞资源 2.3 构建 CSSOM 解析 CSS 文件 构建 CSSOM（CSS 对象模型）树 CSSOM 树包含页面中的所有样式信息 2.4 执行 JavaScript 解析和执行 JavaScript 代码 可能会修改 DOM 和 CSSOM JavaScript 执行会阻塞 DOM 构建 2.</description>
    </item>
    <item>
      <title>浏览器的缓存机制</title>
      <link>https://huing.github.io/posts/%E4%BA%92%E8%81%94%E7%BD%91/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Thu, 03 Apr 2025 10:10:53 +0800</pubDate>
      <guid>https://huing.github.io/posts/%E4%BA%92%E8%81%94%E7%BD%91/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/</guid>
      <description>浏览器的缓存机制 浏览器缓存是一种在本地存储资源副本的机制,可以显著提高网站的访问速度,减少服务器负载和带宽消耗。
1. 缓存类型 1.1 私有缓存 存储在用户浏览器中的缓存 只能被单个用户使用 通常存储个性化内容 1.2 共享缓存 可以被多个用户共享的缓存 包括代理缓存和托管缓存(如 CDN) 通常用于存储公共资源 2. HTTP 缓存控制头部 2.1 强缓存 强缓存允许客户端直接从本地缓存中获取资源,无需向服务器发起请求。主要通过以下头部控制:
Expires (HTTP/1.0)
指定资源的过期时间(绝对时间) 受限于客户端与服务器时间不同步的问题 Cache-Control (HTTP/1.1)
max-age: 指定资源有效期 no-cache: 强制验证缓存 no-store: 禁止缓存 private/public: 指定缓存作用域 2.2 协商缓存 当强缓存失效时,浏览器需要与服务器协商验证资源是否更新。主要有两种方式:
Last-Modified/If-Modified-Since
基于资源的最后修改时间 精确度受限于时间戳 ETag/If-None-Match
基于资源的指纹标识 更精确的验证机制 优先级高于 Last-Modified 3. 启发式缓存 当服务器响应没有明确指定缓存策略时,浏览器会采用启发式缓存:
计算公式: (当前时间 - Last-Modified) * 0.1 在此期间浏览器会使用本地缓存 建议始终明确指定 Cache-Control 来避免启发式缓存 4. 最佳实践 静态资源策略
使用长期的强缓存 文件名包含内容哈希 当内容更新时更改文件名 HTML 文档策略
使用 no-cache 或较短的 max-age 配合 ETag 进行协商缓存 API 响应策略</description>
    </item>
    <item>
      <title>渲染</title>
      <link>https://huing.github.io/posts/%E4%BA%92%E8%81%94%E7%BD%91/%E4%B8%8D%E7%9F%A5%E9%81%93%E6%98%AF%E5%95%A5/</link>
      <pubDate>Tue, 03 Sep 2024 07:27:41 +0800</pubDate>
      <guid>https://huing.github.io/posts/%E4%BA%92%E8%81%94%E7%BD%91/%E4%B8%8D%E7%9F%A5%E9%81%93%E6%98%AF%E5%95%A5/</guid>
      <description>side rendering
ssr ssr 是什么
ssg
esr
rsr
docker lpass jenkins node cdn 静态托管
nextjs(react)
nuxtjs(vue)
bff 网关
k8s v8s
服务器，镜像，容器
webpack5 module federation 模块联邦，webpack5 的一个新特性，可实现跨应用共享代码
MicroApp 、single-spa、qiankuan
无服务器（Serverless）
RPC 远程过程调用（英语：Remote Procedure Call，RPC）是一个计算机通信协议。该协议允许运行于一台计算机的程序调用另一个地址空间（通常为一个开放网络的一台计算机）的子程序，而程序员就像调用本地程序一样，无需额外地为这个交互作用编程（无需关注细节）。RPC 是一种服务器-客户端（Client/Server）模式，经典实现是一个通过发送请求-接受回应进行信息交互的系统
云计算的三种模式 云计算模式所具备的 5 个基本特征（按需自助服务、广泛的网络访问、资源共享、快速的可伸缩性和可度量的服务）、3 种服务模式 SaaS（软件即服务）、PaaS（平台即服务）和 IaaS（基础设施即服务）和 4 种部署方式（私有云、社区云、公有云和混合云），而云服务则是在这个云平台上发布出来的供用户使用的产品服务
IaaS（Infrastructure as a server） 基础设施即服务
PaaS（Platform as a Server） 平台即服务
SaaS（Software as a Server） 软件即服务
区别和关系 云计算(Cloud Computing) 是一种概念和技术，提供按需的计算资源和服务。 云服务(Cloud Service) 是云计算的具体实现形式，包括 IaaS、PaaS 和 SaaS 等不同类型的云服务。 云函数(Cloud Function) 是一种特定的云服务类型，属于&amp;quot;无服务器计算&amp;quot;(Serverless) 模型，适用于事件驱动的任务。 云计算（概念和技术模型） ├── 云服务（具体实现形式） │ ├── IaaS │ ├── PaaS │ └── SaaS └── 云函数（特定服务类型） └── Serverless 的一种实现</description>
    </item>
    <item>
      <title>浏览器的工作原理</title>
      <link>https://huing.github.io/posts/%E4%BA%92%E8%81%94%E7%BD%91/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/</link>
      <pubDate>Tue, 03 Sep 2024 06:49:36 +0800</pubDate>
      <guid>https://huing.github.io/posts/%E4%BA%92%E8%81%94%E7%BD%91/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/</guid>
      <description>HeadlessBrowser Headless Browser(无头浏览器)是一种没有图形用户界面(GUI)的浏览器，可以在后台运行并通过程序代码控制。
主要特点 无界面运行：在服务器等没有图形界面的环境中运行 完整功能：支持 JavaScript 执行、DOM 操作等完整的浏览器功能 自动化支持：可以通过代码完全控制浏览器行为 性能优势：相比传统浏览器占用更少的系统资源 应用场景 自动化测试
端到端测试(E2E Testing) 界面功能测试 跨浏览器兼容性测试 网页爬虫
抓取动态网页内容 模拟用户行为 处理需要 JavaScript 渲染的页面 网页截图与 PDF 生成
自动化网页截图 生成网页 PDF 报告 页面内容导出 性能监控
页面加载性能分析 资源使用情况监控 网络请求追踪 常用实现 Chrome Headless const puppeteer = require(&amp;#34;puppeteer&amp;#34;); (async () =&amp;gt; { const browser = await puppeteer.launch(); const page = await browser.newPage(); await page.goto(&amp;#34;https://example.com&amp;#34;); await page.screenshot({ path: &amp;#34;screenshot.png&amp;#34; }); await browser.close(); })(); Firefox Headless const firefox = require(&amp;#34;selenium-webdriver/firefox&amp;#34;); const options = new firefox.</description>
    </item>
    <item>
      <title>网络是如何连接的</title>
      <link>https://huing.github.io/posts/%E4%BA%92%E8%81%94%E7%BD%91/%E7%BD%91%E7%BB%9C%E6%98%AF%E5%A6%82%E4%BD%95%E8%BF%9E%E6%8E%A5%E7%9A%84/</link>
      <pubDate>Tue, 03 Sep 2024 06:45:36 +0800</pubDate>
      <guid>https://huing.github.io/posts/%E4%BA%92%E8%81%94%E7%BD%91/%E7%BD%91%E7%BB%9C%E6%98%AF%E5%A6%82%E4%BD%95%E8%BF%9E%E6%8E%A5%E7%9A%84/</guid>
      <description>网络是如何连接的 浏览器处理流程 当我们在浏览器中输入一个 URL(如www.example.com)后,浏览器会经过以下步骤:
解析 URL
识别协议(http/https) 识别域名(example.com) 识别资源路径(/) DNS 解析过程
首先检查浏览器 DNS 缓存 检查操作系统 DNS 缓存 检查路由器缓存 向 ISP 的 DNS 服务器发起递归查询 获取目标服务器的 IP 地址 建立连接
与目标服务器建立 TCP 连接(三次握手) 如果是 HTTPS,还需要进行 TLS 握手 发送 HTTP 请求
浏览器构建 HTTP 请求报文 通过网络发送到服务器 浏览器渲染过程
解析 HTML 构建 DOM 树(DOM Tree) 解析 CSS 构建 CSSOM(CSS Object Model) 合并 DOM 和 CSSOM 构建渲染树(Render Tree) 布局(Layout):计算每个节点的几何信息 绘制(Painting):将渲染树绘制到屏幕上 DNS (Domain Name System) 原理 DNS 是一个分布式数据库,主要功能是将域名转换为 IP 地址。解析过程如下:</description>
    </item>
    <item>
      <title>CDN原理</title>
      <link>https://huing.github.io/posts/%E4%BA%92%E8%81%94%E7%BD%91/cdn%E5%8E%9F%E7%90%86/</link>
      <pubDate>Tue, 03 Sep 2024 06:43:54 +0800</pubDate>
      <guid>https://huing.github.io/posts/%E4%BA%92%E8%81%94%E7%BD%91/cdn%E5%8E%9F%E7%90%86/</guid>
      <description>内容分发网络 cdn Content Delivery Network cache-control</description>
    </item>
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>js on huing的博客</title>
    <link>https://blog.promiseme.site/tags/js/</link>
    <description>Recent content in js on huing的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 02 Sep 2022 21:59:01 +0800</lastBuildDate><atom:link href="https://blog.promiseme.site/tags/js/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Promise实现</title>
      <link>https://blog.promiseme.site/post/js/promise%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Fri, 02 Sep 2022 21:59:01 +0800</pubDate>
      
      <guid>https://blog.promiseme.site/post/js/promise%E5%AE%9E%E7%8E%B0/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 class Commitment { static PENDING = &amp;#34;待定&amp;#34;; static FULFILLED = &amp;</description>
    </item>
    
    <item>
      <title>原型链理解</title>
      <link>https://blog.promiseme.site/post/js/%E5%8E%9F%E5%9E%8B%E9%93%BE%E7%90%86%E8%A7%A3/</link>
      <pubDate>Fri, 02 Sep 2022 21:59:01 +0800</pubDate>
      
      <guid>https://blog.promiseme.site/post/js/%E5%8E%9F%E5%9E%8B%E9%93%BE%E7%90%86%E8%A7%A3/</guid>
      <description></description>
    </item>
    
    <item>
      <title>函数柯里化实现</title>
      <link>https://blog.promiseme.site/post/js/%E5%87%BD%E6%95%B0%E6%9F%AF%E9%87%8C%E5%8C%96%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Fri, 02 Sep 2022 21:18:10 +0800</pubDate>
      
      <guid>https://blog.promiseme.site/post/js/%E5%87%BD%E6%95%B0%E6%9F%AF%E9%87%8C%E5%8C%96%E5%AE%9E%E7%8E%B0/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 /* * 柯里化 相加 * */ function add(...argus) { // arguments是个对象 // let args = Array.prototype.slice.call(arguments); const args = argus; const inner = function (...innerArgs) { args.push(...innerArgs); return inner;</description>
    </item>
    
    <item>
      <title>Array</title>
      <link>https://blog.promiseme.site/post/js/array/</link>
      <pubDate>Thu, 01 Sep 2022 20:21:47 +0800</pubDate>
      
      <guid>https://blog.promiseme.site/post/js/array/</guid>
      <description>Array 方法 修改器方法 改变自身的值 push() 1 2 3 4 const sports = [&amp;#34;soccer&amp;#34;, &amp;#34;baseball&amp;#34;]; const total = sports.push(&amp;#34;football&amp;#34;, &amp;#34;swimming&amp;#34;); console.log(sports); // [&amp;#34;soccer&amp;#34;, &amp;#34;baseball&amp;#34;, &amp;#34;football&amp;#34;, &amp;#34;swimming&amp;#34;] console.log(total); // 4 pop() 从一个数组中删除并返回最后一个元素 1 [&amp;#34;a&amp;#34;].pop(); // &amp;#39;a&amp;#39; reverse() 颠倒数组中元素的位</description>
    </item>
    
    <item>
      <title>Base</title>
      <link>https://blog.promiseme.site/post/js/base/</link>
      <pubDate>Thu, 01 Sep 2022 20:20:27 +0800</pubDate>
      
      <guid>https://blog.promiseme.site/post/js/base/</guid>
      <description>浅拷贝方法 1 2 3 slice() Object.assign({}, a) ...rest 获取浏览器信息 navigator 1 2 3 4 5 6 navigator.userAgent; // &amp;#34;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36&amp;#34; navigator.language; // &amp;#34;zh-CN&amp;#34; navigator.languages; // [&amp;#34;zh-CN&amp;#34;, &amp;#34;zh&amp;#34;, &amp;#34;fr-CA&amp;#34;, &amp;#34;fr&amp;#34;, &amp;#34;fr-CH&amp;#34;, &amp;#34;fr-FR&amp;#34;, &amp;#34;en&amp;#34;] setTimeOut 实际延时比设定值更久的原因 最小延迟</description>
    </item>
    
    <item>
      <title>Proxy</title>
      <link>https://blog.promiseme.site/post/js/proxy/</link>
      <pubDate>Thu, 01 Sep 2022 00:00:37 +0800</pubDate>
      
      <guid>https://blog.promiseme.site/post/js/proxy/</guid>
      <description>接口代理 对象代理 https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy 转发代理 1 2 3 4 5 6 let target = {}; let p = new Proxy(target, {}); p.a = 37; // 操作转发到目标 console.log(target.a); // 37. 操作已经被正确地转发</description>
    </item>
    
    <item>
      <title>Clone正则</title>
      <link>https://blog.promiseme.site/post/js/clone%E6%AD%A3%E5%88%99/</link>
      <pubDate>Mon, 27 Jun 2022 19:35:49 +0800</pubDate>
      
      <guid>https://blog.promiseme.site/post/js/clone%E6%AD%A3%E5%88%99/</guid>
      <description>基本语法 \w 匹配一个单字字符 = [A-Za-z0-9_] ? 匹配前面一个表达式 0 次或者 1 次。等价于 {0,1} 如果紧跟在任何量词 *、 +、? 或 {} 的后面，将会使量词变为非贪婪（匹配尽</description>
    </item>
    
    <item>
      <title>普通函数vs箭头函数</title>
      <link>https://blog.promiseme.site/post/js/%E6%99%AE%E9%80%9A%E5%87%BD%E6%95%B0vs%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/</link>
      <pubDate>Wed, 22 Jun 2022 22:49:19 +0800</pubDate>
      
      <guid>https://blog.promiseme.site/post/js/%E6%99%AE%E9%80%9A%E5%87%BD%E6%95%B0vs%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/</guid>
      <description>this，arguments 区别 1 2 3 4 5 6 7 8 9 10 const funA = () =&amp;gt; { // this 指向 funA 的调用 // 没有 arguments // 不能new // 没有原型链 }; function funB(params) { // this 指向 函数内部 // 有</description>
    </item>
    
    <item>
      <title>Map类型</title>
      <link>https://blog.promiseme.site/post/js/map%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Thu, 16 Jun 2022 23:20:39 +0800</pubDate>
      
      <guid>https://blog.promiseme.site/post/js/map%E7%B1%BB%E5%9E%8B/</guid>
      <description>Map 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 // ✅ Initialize Map from Array // 👇️ const map1: Map&amp;lt;string, string&amp;gt; const map1: Map&amp;lt;string, string&amp;gt; = new Map([ [&amp;#39;name&amp;#39;, &amp;#39;Tom&amp;#39;], [&amp;#39;country&amp;#39;, &amp;#39;Chile&amp;#39;], ]); // 👇️ {&amp;#39;name&amp;#39; =&amp;gt; &amp;#39;Tom&amp;#39;, &amp;#39;country&amp;#39; =&amp;gt; &amp;#39;Chile&amp;#39;} console.log(map1); // ✅ Initialize Map from Object const obj = { name: &amp;#39;Tom&amp;#39;, country: &amp;#39;Chile&amp;#39; }; const map2 =</description>
    </item>
    
    <item>
      <title>Bind,apply,call区别</title>
      <link>https://blog.promiseme.site/post/js/bindapplycall%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Mon, 13 Jun 2022 11:41:34 +0800</pubDate>
      
      <guid>https://blog.promiseme.site/post/js/bindapplycall%E5%8C%BA%E5%88%AB/</guid>
      <description>bind, apply, call 区别 1 2 3 4 5 const me = { a: 123 }; const he = { b: 456 }; function x() { console.log(this, arguments, this.a); } bind，返回函数的 copy 使用时要重新调用一次 参数形式， (this, arg1, arg2) 1 2 x.bind(me, 2, 3).bind(he)(); // bind</description>
    </item>
    
    <item>
      <title>数据类型及判断方法</title>
      <link>https://blog.promiseme.site/post/js/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%8F%8A%E5%88%A4%E6%96%AD%E6%96%B9%E6%B3%95/</link>
      <pubDate>Mon, 13 Jun 2022 11:38:56 +0800</pubDate>
      
      <guid>https://blog.promiseme.site/post/js/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%8F%8A%E5%88%A4%E6%96%AD%E6%96%B9%E6%B3%95/</guid>
      <description>js 8 种数据类型 undefined null string number boolean symbol bigint object array function regexp date symbol,bigint 为 es6 新增数据类型 数据类型判断 1 typeof 可以判断值类型， 函数 1 2 3 4 5 6 7 8 9 10 11 typeof 0; // number typeof &amp;#34;ss&amp;#34;; // string typeof undefined; // undefined typeof</description>
    </item>
    
  </channel>
</rss>

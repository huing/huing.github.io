<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>react on huing的博客</title>
    <link>https://blog.promiseme.site/categories/react/</link>
    <description>Recent content in react on huing的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 04 Sep 2022 21:24:41 +0800</lastBuildDate><atom:link href="https://blog.promiseme.site/categories/react/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>语义化标签</title>
      <link>https://blog.promiseme.site/post/css/%E8%AF%AD%E4%B9%89%E5%8C%96%E6%A0%87%E7%AD%BE/</link>
      <pubDate>Sun, 04 Sep 2022 21:24:41 +0800</pubDate>
      
      <guid>https://blog.promiseme.site/post/css/%E8%AF%AD%E4%B9%89%E5%8C%96%E6%A0%87%E7%AD%BE/</guid>
      <description>有利 seo 方便其他设备解析 便于维护提高可读性 section, article, main, p, time, title,header,nav, aside, footer,</description>
    </item>
    
    <item>
      <title>创建一个不能修改的对象方法</title>
      <link>https://blog.promiseme.site/post/js/%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E4%B8%8D%E8%83%BD%E4%BF%AE%E6%94%B9%E7%9A%84%E5%AF%B9%E8%B1%A1%E6%96%B9%E6%B3%95/</link>
      <pubDate>Sun, 04 Sep 2022 12:37:25 +0800</pubDate>
      
      <guid>https://blog.promiseme.site/post/js/%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E4%B8%8D%E8%83%BD%E4%BF%AE%E6%94%B9%E7%9A%84%E5%AF%B9%E8%B1%A1%E6%96%B9%E6%B3%95/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Consumer</title>
      <link>https://blog.promiseme.site/post/react/consumer/</link>
      <pubDate>Sun, 04 Sep 2022 12:35:59 +0800</pubDate>
      
      <guid>https://blog.promiseme.site/post/react/consumer/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Ref实现父组件调用子组件方法</title>
      <link>https://blog.promiseme.site/post/react/ref%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</link>
      <pubDate>Sun, 04 Sep 2022 10:30:23 +0800</pubDate>
      
      <guid>https://blog.promiseme.site/post/react/ref%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</guid>
      <description>Ref 实现父组件调用子组件方法 ref 的值根据节点的类型而有所不同： 当 ref 属性用于 HTML 元素时，构造函数中使用 React.createRef() 创建的 ref 接收底层 DOM 元素作为其 current 属性。 当 ref 属性</description>
    </item>
    
    <item>
      <title>useRef vs useState</title>
      <link>https://blog.promiseme.site/post/react/useref-vs-usestate/</link>
      <pubDate>Wed, 15 Jun 2022 22:53:05 +0800</pubDate>
      
      <guid>https://blog.promiseme.site/post/react/useref-vs-usestate/</guid>
      <description>原文地址 https://blog.logrocket.com/usestate-vs-useref/ useHooks 实现 https://usehooks.com/ useRef 1 const inputRef = useRef(); useState 1 const [count, setCount] = useState(0); let variable 1 let prevCount; useState 返回数组，第一个真实的状态(the actual state)，第二个状态更新函数(the state updater function) 状</description>
    </item>
    
    <item>
      <title>React工程化</title>
      <link>https://blog.promiseme.site/post/react/react%E5%B7%A5%E7%A8%8B%E5%8C%96/</link>
      <pubDate>Sun, 12 Jun 2022 17:31:57 +0800</pubDate>
      
      <guid>https://blog.promiseme.site/post/react/react%E5%B7%A5%E7%A8%8B%E5%8C%96/</guid>
      <description>React 工程化 Scheduler（调度器）—— 调度任务的优先级，高优任务优先进入 Reconciler Reconciler（协调器）—— 负责找出变化的组件 Render</description>
    </item>
    
  </channel>
</rss>

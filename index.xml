<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>huing的博客</title>
    <link>https://blog.promiseme.site/</link>
    <description>Recent content on huing的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 02 Sep 2022 22:14:54 +0800</lastBuildDate><atom:link href="https://blog.promiseme.site/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>关于</title>
      <link>https://blog.promiseme.site/about/</link>
      <pubDate>Sun, 20 Aug 2017 21:38:52 +0800</pubDate>
      
      <guid>https://blog.promiseme.site/about/</guid>
      <description>我的博客 Github 地址 github 邮箱地址</description>
    </item>
    
    <item>
      <title>图片懒加载</title>
      <link>https://blog.promiseme.site/post/%E6%80%A7%E8%83%BD/%E5%9B%BE%E7%89%87%E6%87%92%E5%8A%A0%E8%BD%BD/</link>
      <pubDate>Fri, 02 Sep 2022 22:14:54 +0800</pubDate>
      
      <guid>https://blog.promiseme.site/post/%E6%80%A7%E8%83%BD/%E5%9B%BE%E7%89%87%E6%87%92%E5%8A%A0%E8%BD%BD/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 /* * 利用window 自带方法 交叉观察者 * * */ const io = new IntersectionObserver(entries =&amp;gt; { // console.log(&amp;#34;entries&amp;#34;, entries); entries.forEach(entry =&amp;gt; { if (entry.isIntersecting) { const image = entry.target; const data_src = image.getAttribute(&amp;#34;data-src&amp;#34;); image.setAttribute(&amp;#34;src&amp;#34;, data_src || &amp;#34;&amp;#34;);</description>
    </item>
    
    <item>
      <title>Promise实现</title>
      <link>https://blog.promiseme.site/post/js/promise%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Fri, 02 Sep 2022 21:59:01 +0800</pubDate>
      
      <guid>https://blog.promiseme.site/post/js/promise%E5%AE%9E%E7%8E%B0/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 class Commitment { static PENDING = &amp;#34;待定&amp;#34;; static FULFILLED = &amp;</description>
    </item>
    
    <item>
      <title>原型链理解</title>
      <link>https://blog.promiseme.site/post/js/%E5%8E%9F%E5%9E%8B%E9%93%BE%E7%90%86%E8%A7%A3/</link>
      <pubDate>Fri, 02 Sep 2022 21:59:01 +0800</pubDate>
      
      <guid>https://blog.promiseme.site/post/js/%E5%8E%9F%E5%9E%8B%E9%93%BE%E7%90%86%E8%A7%A3/</guid>
      <description></description>
    </item>
    
    <item>
      <title>函数柯里化实现</title>
      <link>https://blog.promiseme.site/post/js/%E5%87%BD%E6%95%B0%E6%9F%AF%E9%87%8C%E5%8C%96%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Fri, 02 Sep 2022 21:18:10 +0800</pubDate>
      
      <guid>https://blog.promiseme.site/post/js/%E5%87%BD%E6%95%B0%E6%9F%AF%E9%87%8C%E5%8C%96%E5%AE%9E%E7%8E%B0/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 /* * 柯里化 相加 * */ function add(...argus) { // arguments是个对象 // let args = Array.prototype.slice.call(arguments); const args = argus; const inner = function (...innerArgs) { args.push(...innerArgs); return inner;</description>
    </item>
    
    <item>
      <title>Array</title>
      <link>https://blog.promiseme.site/post/js/array/</link>
      <pubDate>Thu, 01 Sep 2022 20:21:47 +0800</pubDate>
      
      <guid>https://blog.promiseme.site/post/js/array/</guid>
      <description>Array 方法 修改器方法 改变自身的值 push() 1 2 3 4 const sports = [&amp;#34;soccer&amp;#34;, &amp;#34;baseball&amp;#34;]; const total = sports.push(&amp;#34;football&amp;#34;, &amp;#34;swimming&amp;#34;); console.log(sports); // [&amp;#34;soccer&amp;#34;, &amp;#34;baseball&amp;#34;, &amp;#34;football&amp;#34;, &amp;#34;swimming&amp;#34;] console.log(total); // 4 pop() 从一个数组中删除并返回最后一个元素 1 [&amp;#34;a&amp;#34;].pop(); // &amp;#39;a&amp;#39; reverse() 颠倒数组中元素的位</description>
    </item>
    
    <item>
      <title>Base</title>
      <link>https://blog.promiseme.site/post/js/base/</link>
      <pubDate>Thu, 01 Sep 2022 20:20:27 +0800</pubDate>
      
      <guid>https://blog.promiseme.site/post/js/base/</guid>
      <description>浅拷贝方法 1 2 3 slice() Object.assign({}, a) ...rest 获取浏览器信息 navigator 1 2 3 4 5 6 navigator.userAgent; // &amp;#34;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36&amp;#34; navigator.language; // &amp;#34;zh-CN&amp;#34; navigator.languages; // [&amp;#34;zh-CN&amp;#34;, &amp;#34;zh&amp;#34;, &amp;#34;fr-CA&amp;#34;, &amp;#34;fr&amp;#34;, &amp;#34;fr-CH&amp;#34;, &amp;#34;fr-FR&amp;#34;, &amp;#34;en&amp;#34;] setTimeOut 实际延时比设定值更久的原因 最小延迟</description>
    </item>
    
    <item>
      <title>Proxy</title>
      <link>https://blog.promiseme.site/post/js/proxy/</link>
      <pubDate>Thu, 01 Sep 2022 00:00:37 +0800</pubDate>
      
      <guid>https://blog.promiseme.site/post/js/proxy/</guid>
      <description>接口代理 对象代理 https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy 转发代理 1 2 3 4 5 6 let target = {}; let p = new Proxy(target, {}); p.a = 37; // 操作转发到目标 console.log(target.a); // 37. 操作已经被正确地转发</description>
    </item>
    
    <item>
      <title>泛型</title>
      <link>https://blog.promiseme.site/post/ts/%E6%B3%9B%E5%9E%8B/</link>
      <pubDate>Wed, 31 Aug 2022 23:49:45 +0800</pubDate>
      
      <guid>https://blog.promiseme.site/post/ts/%E6%B3%9B%E5%9E%8B/</guid>
      <description>泛型参数的默认类型 1 2 3 4 5 6 7 function createArray&amp;lt;T = string&amp;gt;(length: number, value: T): Array&amp;lt;T&amp;gt; { let result: T[] = []; for (let i = 0; i &amp;lt; length; i++) { result[i] = value; } return result; } 1 2 3 map&amp;lt;U&amp;gt;(callbackfn: (value: T, index: number, array: T[]) =&amp;gt; U, thisArg?: any): U[]; reduce(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array:</description>
    </item>
    
    <item>
      <title>Css值与单位</title>
      <link>https://blog.promiseme.site/post/css/css%E5%80%BC%E4%B8%8E%E5%8D%95%E4%BD%8D/</link>
      <pubDate>Wed, 31 Aug 2022 23:12:58 +0800</pubDate>
      
      <guid>https://blog.promiseme.site/post/css/css%E5%80%BC%E4%B8%8E%E5%8D%95%E4%BD%8D/</guid>
      <description>绝对长度单位 与任何东西都没有关系 cm mm pt: 点 px: 像素 相对长度单位 em: 在 font-size 中使用是相对于父元素的字体大小，在其他属性中使用是相对于自身的字体大小，如 width</description>
    </item>
    
    <item>
      <title>H5流程理解</title>
      <link>https://blog.promiseme.site/post/%E6%80%A7%E8%83%BD/h5%E6%B5%81%E7%A8%8B%E7%90%86%E8%A7%A3/</link>
      <pubDate>Tue, 28 Jun 2022 11:24:10 +0800</pubDate>
      
      <guid>https://blog.promiseme.site/post/%E6%80%A7%E8%83%BD/h5%E6%B5%81%E7%A8%8B%E7%90%86%E8%A7%A3/</guid>
      <description>h5 在微信环境下运行的 html pc html 通过 jssdk 到小程序 WebView</description>
    </item>
    
    <item>
      <title>Clone正则</title>
      <link>https://blog.promiseme.site/post/js/clone%E6%AD%A3%E5%88%99/</link>
      <pubDate>Mon, 27 Jun 2022 19:35:49 +0800</pubDate>
      
      <guid>https://blog.promiseme.site/post/js/clone%E6%AD%A3%E5%88%99/</guid>
      <description>基本语法 \w 匹配一个单字字符 = [A-Za-z0-9_] ? 匹配前面一个表达式 0 次或者 1 次。等价于 {0,1} 如果紧跟在任何量词 *、 +、? 或 {} 的后面，将会使量词变为非贪婪（匹配尽</description>
    </item>
    
    <item>
      <title>nextjs预渲染理解</title>
      <link>https://blog.promiseme.site/post/%E6%80%A7%E8%83%BD/nextjs%E9%A2%84%E6%B8%B2%E6%9F%93%E7%90%86%E8%A7%A3/</link>
      <pubDate>Mon, 27 Jun 2022 19:13:36 +0800</pubDate>
      
      <guid>https://blog.promiseme.site/post/%E6%80%A7%E8%83%BD/nextjs%E9%A2%84%E6%B8%B2%E6%9F%93%E7%90%86%E8%A7%A3/</guid>
      <description>静态生成 构建时 （build time） 生成 html 在每个页面请求时重用 可以被 cdn 缓存 服务器端渲染 在地址栏输入 url，发送 get 请求，生成 html 页面内容会随着每</description>
    </item>
    
    <item>
      <title>类型断言类型谓词</title>
      <link>https://blog.promiseme.site/post/ts/%E7%B1%BB%E5%9E%8B%E6%96%AD%E8%A8%80%E7%B1%BB%E5%9E%8B%E8%B0%93%E8%AF%8D/</link>
      <pubDate>Thu, 23 Jun 2022 16:50:50 +0800</pubDate>
      
      <guid>https://blog.promiseme.site/post/ts/%E7%B1%BB%E5%9E%8B%E6%96%AD%E8%A8%80%E7%B1%BB%E5%9E%8B%E8%B0%93%E8%AF%8D/</guid>
      <description>is 类型谓词 type predicates as 类型断言 type assertions 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 type Fish = { swim: () =&amp;gt; void }; type Bird = { fly: () =&amp;gt; void }; // | 联合类型 declare function getSmallPet(): Fish | Bird; function isFish(pet: Fish | Bird): pet is Fish {</description>
    </item>
    
    <item>
      <title>普通函数vs箭头函数</title>
      <link>https://blog.promiseme.site/post/js/%E6%99%AE%E9%80%9A%E5%87%BD%E6%95%B0vs%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/</link>
      <pubDate>Wed, 22 Jun 2022 22:49:19 +0800</pubDate>
      
      <guid>https://blog.promiseme.site/post/js/%E6%99%AE%E9%80%9A%E5%87%BD%E6%95%B0vs%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/</guid>
      <description>this，arguments 区别 1 2 3 4 5 6 7 8 9 10 const funA = () =&amp;gt; { // this 指向 funA 的调用 // 没有 arguments // 不能new // 没有原型链 }; function funB(params) { // this 指向 函数内部 // 有</description>
    </item>
    
    <item>
      <title>Map类型</title>
      <link>https://blog.promiseme.site/post/js/map%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Thu, 16 Jun 2022 23:20:39 +0800</pubDate>
      
      <guid>https://blog.promiseme.site/post/js/map%E7%B1%BB%E5%9E%8B/</guid>
      <description>Map 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 // ✅ Initialize Map from Array // 👇️ const map1: Map&amp;lt;string, string&amp;gt; const map1: Map&amp;lt;string, string&amp;gt; = new Map([ [&amp;#39;name&amp;#39;, &amp;#39;Tom&amp;#39;], [&amp;#39;country&amp;#39;, &amp;#39;Chile&amp;#39;], ]); // 👇️ {&amp;#39;name&amp;#39; =&amp;gt; &amp;#39;Tom&amp;#39;, &amp;#39;country&amp;#39; =&amp;gt; &amp;#39;Chile&amp;#39;} console.log(map1); // ✅ Initialize Map from Object const obj = { name: &amp;#39;Tom&amp;#39;, country: &amp;#39;Chile&amp;#39; }; const map2 =</description>
    </item>
    
    <item>
      <title>useRef vs useState</title>
      <link>https://blog.promiseme.site/post/react/useref-vs-usestate/</link>
      <pubDate>Wed, 15 Jun 2022 22:53:05 +0800</pubDate>
      
      <guid>https://blog.promiseme.site/post/react/useref-vs-usestate/</guid>
      <description>原文地址 https://blog.logrocket.com/usestate-vs-useref/ useHooks 实现 https://usehooks.com/ useRef 1 const inputRef = useRef(); useState 1 const [count, setCount] = useState(0); let variable 1 let prevCount; useState 返回数组，第一个真实的状态(the actual state)，第二个状态更新函数(the state updater function) 状</description>
    </item>
    
    <item>
      <title>常用快捷键</title>
      <link>https://blog.promiseme.site/post/%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</link>
      <pubDate>Wed, 15 Jun 2022 18:09:40 +0800</pubDate>
      
      <guid>https://blog.promiseme.site/post/%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</guid>
      <description>iterm 左右切换 command + 左右键 new tab command + t close tab command + w 分屏左右切换 command + option + 左右键 分屏新建标签页 command + d 关闭 iterm command + q chrome 打开无痕模式 incognito command + shift + n 关闭标签页 command + w</description>
    </item>
    
    <item>
      <title>终端命令</title>
      <link>https://blog.promiseme.site/post/%E7%BB%88%E7%AB%AF%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Wed, 15 Jun 2022 10:50:52 +0800</pubDate>
      
      <guid>https://blog.promiseme.site/post/%E7%BB%88%E7%AB%AF%E5%91%BD%E4%BB%A4/</guid>
      <description>cp -r dir1/ dir2 移动文件 mv file.jpg file2.jpg 重命名 mvdir dir1 dir2 移动或重命名一个目录 cd filename 转到目录 pwd 显示当前路径 mkdir dirname 创建一个目录 rm -r dir 删除目录 dircmp dir1 dir2 比较两个目录的内容 touch src/index.js 创</description>
    </item>
    
    <item>
      <title>Git常用命令</title>
      <link>https://blog.promiseme.site/post/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Wed, 15 Jun 2022 10:11:31 +0800</pubDate>
      
      <guid>https://blog.promiseme.site/post/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid>
      <description>git log &amp;ndash;pretty=oneline &amp;ndash;graph git reflog 记录命令历史 git checkout 1 2 3 git checkout --readme.text 丢弃工作区修改 git checkout -b dev 创建并切换到dev分支 git checkout -b dev origin/dev 创建远程origin的dev分支到本地 git branch 1 2</description>
    </item>
    
    <item>
      <title>const常量断言用法</title>
      <link>https://blog.promiseme.site/post/ts/const%E5%B8%B8%E9%87%8F%E6%96%AD%E8%A8%80%E7%94%A8%E6%B3%95/</link>
      <pubDate>Tue, 14 Jun 2022 10:35:51 +0800</pubDate>
      
      <guid>https://blog.promiseme.site/post/ts/const%E5%B8%B8%E9%87%8F%E6%96%AD%E8%A8%80%E7%94%A8%E6%B3%95/</guid>
      <description>索引访问类型 Indexed Access Types 常量断言 const assertions 数组转 type 1 2 3 4 5 const animals = [&amp;#39;cat&amp;#39;, &amp;#39;dog&amp;#39;, &amp;#39;mouse&amp;#39;] as const // const animals: readonly [&amp;#39;cat&amp;#39;, &amp;#39;dog&amp;#39;, &amp;#39;mouse&amp;#39;] type Animal = typeof animals[number] // type Animal = &amp;#39;cat&amp;#39; | &amp;#39;dog&amp;#39; | &amp;#39;mouse&amp;#39; 数组对象转 type 1 2 3 4 5 const animals = [ { species:</description>
    </item>
    
    <item>
      <title>Cdn是什么</title>
      <link>https://blog.promiseme.site/post/%E6%80%A7%E8%83%BD/cdn%E6%98%AF%E4%BB%80%E4%B9%88/</link>
      <pubDate>Mon, 13 Jun 2022 11:54:42 +0800</pubDate>
      
      <guid>https://blog.promiseme.site/post/%E6%80%A7%E8%83%BD/cdn%E6%98%AF%E4%BB%80%E4%B9%88/</guid>
      <description>内容分发网络 cdn Content Delivery Network cache-control</description>
    </item>
    
    <item>
      <title>Bind,apply,call区别</title>
      <link>https://blog.promiseme.site/post/js/bindapplycall%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Mon, 13 Jun 2022 11:41:34 +0800</pubDate>
      
      <guid>https://blog.promiseme.site/post/js/bindapplycall%E5%8C%BA%E5%88%AB/</guid>
      <description>bind, apply, call 区别 1 2 3 4 5 const me = { a: 123 }; const he = { b: 456 }; function x() { console.log(this, arguments, this.a); } bind，返回函数的 copy 使用时要重新调用一次 参数形式， (this, arg1, arg2) 1 2 x.bind(me, 2, 3).bind(he)(); // bind</description>
    </item>
    
    <item>
      <title>数据类型及判断方法</title>
      <link>https://blog.promiseme.site/post/js/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%8F%8A%E5%88%A4%E6%96%AD%E6%96%B9%E6%B3%95/</link>
      <pubDate>Mon, 13 Jun 2022 11:38:56 +0800</pubDate>
      
      <guid>https://blog.promiseme.site/post/js/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%8F%8A%E5%88%A4%E6%96%AD%E6%96%B9%E6%B3%95/</guid>
      <description>js 8 种数据类型 undefined null string number boolean symbol bigint object array function regexp date symbol,bigint 为 es6 新增数据类型 数据类型判断 1 typeof 可以判断值类型， 函数 1 2 3 4 5 6 7 8 9 10 11 typeof 0; // number typeof &amp;#34;ss&amp;#34;; // string typeof undefined; // undefined typeof</description>
    </item>
    
    <item>
      <title>Flex</title>
      <link>https://blog.promiseme.site/post/css/flex/</link>
      <pubDate>Sun, 12 Jun 2022 17:32:26 +0800</pubDate>
      
      <guid>https://blog.promiseme.site/post/css/flex/</guid>
      <description>line-height 如何继承 line-height 具体值 30px 子元素继承该值 line-height 比例 1.5 子元素继承该比例 line-height 百分比 200% 子元素继承 父元素 font-size * 200% 的值 flex: 1 flex: 1 1 0% flex-grow 定义项目的放大比例，默认为 0，即</description>
    </item>
    
    <item>
      <title>React工程化</title>
      <link>https://blog.promiseme.site/post/react/react%E5%B7%A5%E7%A8%8B%E5%8C%96/</link>
      <pubDate>Sun, 12 Jun 2022 17:31:57 +0800</pubDate>
      
      <guid>https://blog.promiseme.site/post/react/react%E5%B7%A5%E7%A8%8B%E5%8C%96/</guid>
      <description>React 工程化 Scheduler（调度器）—— 调度任务的优先级，高优任务优先进入 Reconciler Reconciler（协调器）—— 负责找出变化的组件 Render</description>
    </item>
    
  </channel>
</rss>

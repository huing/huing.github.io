<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>My Site</title>
    <link>https://blog.promiseme.site/</link>
    <description>Recent content on My Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 13 Jun 2022 11:54:42 +0800</lastBuildDate><atom:link href="https://blog.promiseme.site/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Cdn是什么</title>
      <link>https://blog.promiseme.site/%E6%80%A7%E8%83%BD/cdn%E6%98%AF%E4%BB%80%E4%B9%88/</link>
      <pubDate>Mon, 13 Jun 2022 11:54:42 +0800</pubDate>
      
      <guid>https://blog.promiseme.site/%E6%80%A7%E8%83%BD/cdn%E6%98%AF%E4%BB%80%E4%B9%88/</guid>
      <description>内容分发网络 cdn Content Delivery Network cache-control</description>
    </item>
    
    <item>
      <title>Bind,apply,call区别</title>
      <link>https://blog.promiseme.site/js/bindapplycall%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Mon, 13 Jun 2022 11:41:34 +0800</pubDate>
      
      <guid>https://blog.promiseme.site/js/bindapplycall%E5%8C%BA%E5%88%AB/</guid>
      <description>bind, apply, call 区别 const me = { a: 123 }; const he = { b: 456 }; function x() { console.log(this, arguments, this.a); } bind，返回函数的 copy 使用时要重新调用一次 参数形式， (this, arg1, arg2)
x.bind(me, 2, 3).bind(he)(); // bind只生效一次！ // {a: 123} {&amp;#39;0&amp;#39;: 2,&amp;#39;1&amp;#39;: 3} 123 apply，返回函数的调用的结果 参数形式， (this, [arg1, arg2])
x.apply(me, [2, 3]); // {a: 123} {&amp;#39;0&amp;#39;: 2,&amp;#39;1&amp;#39;: 3} 123 call，返回函数的调用的结果 参数形式， (this, arg1, arg2)
x.call(me, 2, 3); // {a: 123} {&amp;#39;0&amp;#39;: 2,&amp;#39;1&amp;#39;: 3} 123 </description>
    </item>
    
    <item>
      <title>数据类型及判断方法</title>
      <link>https://blog.promiseme.site/js/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%8F%8A%E5%88%A4%E6%96%AD%E6%96%B9%E6%B3%95/</link>
      <pubDate>Mon, 13 Jun 2022 11:38:56 +0800</pubDate>
      
      <guid>https://blog.promiseme.site/js/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%8F%8A%E5%88%A4%E6%96%AD%E6%96%B9%E6%B3%95/</guid>
      <description>js8 种数据类型 undefined null string number boolean symbol bigint object array function regexp date symbol,bigint 为 es6 新增数据类型
数据类型判断 1 typeof 可以判断值类型， 函数 typeof 0; // number typeof &amp;#34;ss&amp;#34;; // string typeof undefined; // undefined typeof true; // boolean typeof function () {}; // function typeof 2n; // bigint es6新增数据类型 typeof Symbol(&amp;#34;a&amp;#34;); // symbol es6新增数据类型 typeof null; // object 被认为是对象的占位符,但从技术上来说，它仍然是原始值 typeof []; // object typeof {}; // object 2 instanceof 能判断对象类型 [] instanceof Array; //true [] instanceof Object; // true [].</description>
    </item>
    
    <item>
      <title>Flex</title>
      <link>https://blog.promiseme.site/css/flex/</link>
      <pubDate>Sun, 12 Jun 2022 17:32:26 +0800</pubDate>
      
      <guid>https://blog.promiseme.site/css/flex/</guid>
      <description>line-height 如何继承 line-height 具体值 30px 子元素继承该值
line-height 比例 1.5 子元素继承该比例
line-height 百分比 200% 子元素继承 父元素 font-size * 200% 的值
flex: 1 flex: 1 1 0%
flex-grow 定义项目的放大比例，默认为 0，即如果存在剩余空间，也不放大
flex-shrink 定义项目的缩小比例，默认为 1，即如果空间不足，该项目将缩小,为 0 空间不足不缩小
flex-basis 定义项目占据的主轴空间 ，默认值为 auto, 即项目本来的大小
flex:1; width: 0; flex-basis: auto 有宽就用宽度的值 width: 200px 其次为内容的大小，max-content flex-basis:0 </description>
    </item>
    
    <item>
      <title>React工程化</title>
      <link>https://blog.promiseme.site/react/react%E5%B7%A5%E7%A8%8B%E5%8C%96/</link>
      <pubDate>Sun, 12 Jun 2022 17:31:57 +0800</pubDate>
      
      <guid>https://blog.promiseme.site/react/react%E5%B7%A5%E7%A8%8B%E5%8C%96/</guid>
      <description>React 工程化</description>
    </item>
    
    <item>
      <title>Search</title>
      <link>https://blog.promiseme.site/search/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.promiseme.site/search/</guid>
      <description>search</description>
    </item>
    
  </channel>
</rss>
